     1                                  extern printf                                               
     2                                  
     3                                  extern scanf                                                
     4                                  
     5                                  
     6                                  global compute_trip
     7                                  
     8                                  segment .data                 
     9 00000000 257300                  string_format db "%s", 0
    10 00000003 256C6600                float_format db "%lf",0
    11 00000007 506C6561736520656E-     initial_distance db "Please enter the speed for the initial segment of the trip (mph): ", 0
    11 00000010 746572207468652073-
    11 00000019 7065656420666F7220-
    11 00000022 74686520696E697469-
    11 0000002B 616C207365676D656E-
    11 00000034 74206F662074686520-
    11 0000003D 7472697020286D7068-
    11 00000046 293A2000           
    12 0000004A 666F7220686F77206D-     initial_speed db "for how many miles?  ",0
    12 00000053 616E79206D696C6573-
    12 0000005C 3F202000           
    13 00000060 576861742077696C6C-     second_speed db "What will be your speed during the final segment of the trip (mph)?  ",0
    13 00000069 20626520796F757220-
    13 00000072 737065656420647572-
    13 0000007B 696E67207468652066-
    13 00000084 696E616C207365676D-
    13 0000008D 656E74206F66207468-
    13 00000096 65207472697020286D-
    13 0000009F 7068293F202000     
    14                                  
    15 000000A6 596F75722061766572-     average_speed db "Your average speed will be: ", 10,0
    15 000000AF 616765207370656564-
    15 000000B8 2077696C6C2062653A-
    15 000000C1 200A00             
    16 000000C4 20206D706800            mph db "  mph",0
    17 000000CA 54686520746F74616C-     final_time db "The total travel time will be: ", 10,0
    17 000000D3 2074726176656C2074-
    17 000000DC 696D652077696C6C20-
    17 000000E5 62653A200A00       
    18 000000EB 2020686F75727300        hours db "  hours",0
    19 000000F3 0A00                    spacer db "", 10,0
    20                                  ;average_speed db "Your average speed will be %lf mph", 10, 0
    21 000000F5 0000000000B06F40        total_miles dq 253.5
    22 000000FD 000000000000F0BF        wrong_in dq -1.0
    23                                  
    24                                  segment .bss      
    25 00000000 ????????????????        first_leg_distance resq 1
    26 00000008 ????????????????        first_leg_speed resq 1
    27 00000010 ????????????????        second_leg_speed resq 1
    28                                  
    29 00000018 ????????????????        total_time resq 1
    30 00000020 ????????????????        avg_speed resq 1
    31                                  
    32                                  segment .text
    33                                  compute_trip:                                          
    34                                  
    35                                  
    36 00000000 55                      push       rbp                                              
    37 00000001 4889E5                  mov        rbp, rsp                                         
    38 00000004 53                      push       rbx                                              
    39 00000005 51                      push       rcx                                              
    40 00000006 52                      push       rdx                                              
    41 00000007 56                      push       rsi                                              
    42 00000008 57                      push       rdi                                              
    43 00000009 4150                    push       r8                                               
    44 0000000B 4151                    push       r9                                               
    45 0000000D 4152                    push       r10                                              
    46 0000000F 4153                    push       r11                                              
    47 00000011 4154                    push       r12                                              
    48 00000013 4155                    push       r13                                              
    49 00000015 4156                    push       r14                                              
    50 00000017 4157                    push       r15                                              
    51 00000019 9C                      pushf                   
    52                                  
    53                                  ;<mov rdi to format and rsi to variable memory pring and same with scanf but input to top of stack then save that to xmm register so can do other operations >
    54                                  
    55                                  ;prompt user for initial distance
    56 0000001A B800000000              mov rax, 0
    57 0000001F 48BF-                   mov rdi, string_format
    57 00000021 [0000000000000000] 
    58 00000029 48BE-                   mov rsi, initial_distance
    58 0000002B [0700000000000000] 
    59 00000033 E8(00000000)            call printf
    60                                  
    61                                  ;collect inital distance and save to first_leg_distance
    62 00000038 B800000000              mov rax, 0
    63 0000003D 48BF-                   mov rdi, float_format
    63 0000003F [0300000000000000] 
    64 00000047 48BE-                   mov rsi, first_leg_distance
    64 00000049 [0000000000000000] 
    65 00000051 E8(00000000)            call scanf
    66                                  
    67                                  ;prompt user for inital speed
    68 00000056 B800000000              mov rax, 0
    69 0000005B 48BF-                   mov rdi, string_format
    69 0000005D [0000000000000000] 
    70 00000065 48BE-                   mov rsi, initial_speed
    70 00000067 [4A00000000000000] 
    71 0000006F E8(00000000)            call printf
    72                                  
    73                                  ;collect inital speed and save to first_leg_speed
    74 00000074 B800000000              mov rax, 0
    75 00000079 48BF-                   mov rdi, float_format
    75 0000007B [0300000000000000] 
    76 00000083 48BE-                   mov rsi, first_leg_speed
    76 00000085 [0800000000000000] 
    77 0000008D E8(00000000)            call scanf
    78                                  
    79                                  ;prompt user for final speed
    80 00000092 B800000000              mov rax,0
    81 00000097 48BF-                   mov rdi, string_format
    81 00000099 [0000000000000000] 
    82 000000A1 48BE-                   mov rsi, second_speed
    82 000000A3 [6000000000000000] 
    83 000000AB E8(00000000)            call printf
    84                                  
    85                                  ;collect second speed and save to second_leg_speed
    86 000000B0 B800000000              mov rax, 0
    87 000000B5 48BF-                   mov rdi, float_format
    87 000000B7 [0300000000000000] 
    88 000000BF 48BE-                   mov rsi, second_leg_speed
    88 000000C1 [1000000000000000] 
    89 000000C9 E8(00000000)            call scanf
    90                                  
    91                                  ;======================================calculations==========================================
    92                                  ;move total_miles to xmm8
    93 000000CE F2440F100425-           movsd xmm8, [total_miles]
    93 000000D4 [F5000000]         
    94                                  
    95                                  ;move first leg distance to xmm9
    96 000000D8 F2440F100C25-           movsd xmm9, [first_leg_distance]
    96 000000DE [00000000]         
    97                                  
    98                                  ;move first leg speed to xmm10
    99 000000E2 F2440F101425-           movsd xmm10, [first_leg_speed]
    99 000000E8 [08000000]         
   100                                  
   101                                  ;move second speed to xmm11
   102 000000EC F2440F101C25-           movsd xmm11, [second_leg_speed]
   102 000000F2 [10000000]         
   103                                  
   104                                  ;calc second distance
   105 000000F6 F2450F5CC1              subsd xmm8, xmm9                     ;total miles - first leg ==> second distance (xmm8)
   106                                  
   107                                  ;calc second time
   108 000000FB F2450F5EC3              divsd xmm8, xmm11                    ;second distance / second speed ==> second time (xmm8)
   109                                  
   110                                  ;calc first time
   111 00000100 F2450F5ECA              divsd xmm9,xmm10                     ;first distance / first speed ==> first time (xmm9)
   112                                  
   113                                  ;total time
   114 00000105 F2450F58C8              addsd xmm9, xmm8 ;total time (xmm9)
   115                                  
   116                                  ;total speed
   117 0000010A F2450F58D3              addsd xmm10,xmm11 ;total speed (xmm11)
   118                                  
   119                                  ;avg speed
   120 0000010F F2450F5ED9              divsd xmm11,xmm9 ;avg speed (xmm11)
   121                                  
   122                                  ;================================= dispaly ========================================================
   123                                  
   124                                  ;display avg speed prompt
   125 00000114 B800000000              mov rax,0
   126 00000119 48BF-                   mov rdi, string_format
   126 0000011B [0000000000000000] 
   127 00000123 48BE-                   mov rsi, average_speed
   127 00000125 [A600000000000000] 
   128 0000012D E8(00000000)            call printf
   129                                  
   130 00000132 F2410F10C3              movsd xmm0,xmm11
   131 00000137 48BF-                   mov rdi, float_format
   131 00000139 [0300000000000000] 
   132 00000141 48BE-                   mov rsi, average_speed
   132 00000143 [A600000000000000] 
   133 0000014B E8(00000000)            call printf
   134                                  
   135 00000150 B800000000              mov rax,0
   136 00000155 48BF-                   mov rdi, string_format
   136 00000157 [0000000000000000] 
   137 0000015F 48BE-                   mov rsi, mph
   137 00000161 [C400000000000000] 
   138 00000169 E8(00000000)            call printf
   139                                  
   140                                  ;display nothing
   141 0000016E B800000000              mov rax,0
   142 00000173 48BF-                   mov rdi, string_format
   142 00000175 [0000000000000000] 
   143 0000017D 48BE-                   mov rsi, spacer
   143 0000017F [F300000000000000] 
   144 00000187 E8(00000000)            call printf
   145                                  
   146                                  ;display total time prompt
   147 0000018C B800000000              mov rax,0
   148 00000191 48BF-                   mov rdi, string_format
   148 00000193 [0000000000000000] 
   149 0000019B 48BE-                   mov rsi, final_time
   149 0000019D [CA00000000000000] 
   150 000001A5 E8(00000000)            call printf
   151                                  
   152 000001AA F2410F10C1              movsd xmm0,xmm9
   153 000001AF 48BF-                   mov rdi, float_format
   153 000001B1 [0300000000000000] 
   154 000001B9 48BE-                   mov rsi, total_time
   154 000001BB [1800000000000000] 
   155 000001C3 E8(00000000)            call printf
   156                                  
   157 000001C8 B800000000              mov rax,0
   158 000001CD 48BF-                   mov rdi, string_format
   158 000001CF [0000000000000000] 
   159 000001D7 48BE-                   mov rsi, hours
   159 000001D9 [EB00000000000000] 
   160 000001E1 E8(00000000)            call printf
   161                                  
   162                                  ;display nothing
   163 000001E6 B800000000              mov rax,0
   164 000001EB 48BF-                   mov rdi, string_format
   164 000001ED [0000000000000000] 
   165 000001F5 48BE-                   mov rsi, spacer
   165 000001F7 [F300000000000000] 
   166 000001FF E8(00000000)            call printf
   167                                  
   168                                  ;fina:
   169 00000204 9D                      popf                                                        
   170 00000205 415F                    pop        r15                                              
   171 00000207 415E                    pop        r14                                              
   172 00000209 415D                    pop        r13                                              
   173 0000020B 415C                    pop        r12                                              
   174 0000020D 415B                    pop        r11                                              
   175 0000020F 415A                    pop        r10                                              
   176 00000211 4159                    pop        r9                                               
   177 00000213 4158                    pop        r8                                               
   178 00000215 5F                      pop        rdi                                              
   179 00000216 5E                      pop        rsi                                              
   180 00000217 5A                      pop        rdx                                              
   181 00000218 59                      pop        rcx                                              
   182 00000219 5B                      pop        rbx                                              
   183 0000021A 5D                      pop        rbp                                              
   184                                  
   185                                  
   186 0000021B C3                      ret
